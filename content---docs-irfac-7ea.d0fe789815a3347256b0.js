(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{63:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",function(){return b}),a.d(t,"rightToc",function(){return i}),a.d(t,"default",function(){return s});a(0);var n=a(80);function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var b={id:"ir",title:"IR"},i=[{value:"Design of the Hermes high-level IR",id:"design-of-the-hermes-high-level-ir",children:[{value:"Introduction",id:"introduction",children:[]},{value:"Well-Formedness",id:"well-formedness",children:[]},{value:"Frames:",id:"frames",children:[]},{value:"Types:",id:"types",children:[]},{value:"Example:",id:"example",children:[]},{value:"Side Effects:",id:"side-effects",children:[]}]},{value:"Register allocation",id:"register-allocation",children:[]},{value:"Generator Overview",id:"generator-overview",children:[]},{value:"Instruction semantics",id:"instruction-semantics",children:[{value:"BranchInst",id:"branchinst",children:[]},{value:"ReturnInst",id:"returninst",children:[]},{value:"AllocStackInst",id:"allocstackinst",children:[]},{value:"LoadFrameInst",id:"loadframeinst",children:[]},{value:"LoadStackInst",id:"loadstackinst",children:[]},{value:"StoreFrameInst",id:"storeframeinst",children:[]},{value:"StoreStackInst",id:"storestackinst",children:[]},{value:"AsNumberInst",id:"asnumberinst",children:[]},{value:"AsInt32Inst",id:"asint32inst",children:[]},{value:"AddEmptyStringInst",id:"addemptystringinst",children:[]},{value:"CondBranchInst",id:"condbranchinst",children:[]},{value:"CompareBranchInst",id:"comparebranchinst",children:[]},{value:"CreateFunction",id:"createfunction",children:[]},{value:"BinaryOperatorInst",id:"binaryoperatorinst",children:[]},{value:"DirectEvalInst",id:"directevalinst",children:[]},{value:"CallInst",id:"callinst",children:[]},{value:"ConstructInst",id:"constructinst",children:[]},{value:"LoadPropertyInst",id:"loadpropertyinst",children:[]},{value:"DeletePropertyInst",id:"deletepropertyinst",children:[]},{value:"StorePropertyInst",id:"storepropertyinst",children:[]},{value:"TryStoreGlobalPropertyInst",id:"trystoreglobalpropertyinst",children:[]},{value:"StoreOwnPropertyInst",id:"storeownpropertyinst",children:[]},{value:"StoreNewOwnPropertyInst",id:"storenewownpropertyinst",children:[]},{value:"StoreGetterSetterInst",id:"storegettersetterinst",children:[]},{value:"AllocObjectInst",id:"allocobjectinst",children:[]},{value:"AllocArrayInst",id:"allocarrayinst",children:[]},{value:"CreateArgumentsInst",id:"createargumentsinst",children:[]},{value:"CreateRegExpInst",id:"createregexpinst",children:[]},{value:"SwitchInst",id:"switchinst",children:[]},{value:"GetPNamesInst",id:"getpnamesinst",children:[]},{value:"GetNextPNameInst",id:"getnextpnameinst",children:[]},{value:"CatchInst",id:"catchinst",children:[]},{value:"ThrowInst",id:"throwinst",children:[]},{value:"CheckHasInstanceInst",id:"checkhasinstanceinst",children:[]},{value:"TryStartInst",id:"trystartinst",children:[]},{value:"TryEndInst",id:"tryendinst",children:[]},{value:"PhiInst",id:"phiinst",children:[]},{value:"MovInst",id:"movinst",children:[]},{value:"ImplicitMovInst",id:"implicitmovinst",children:[]},{value:"DebuggerInst",id:"debuggerinst",children:[]},{value:"GetNewTargetInst",id:"getnewtargetinst",children:[]},{value:"ThrowIfUndefinedInst",id:"throwifundefinedinst",children:[]},{value:"CoerceThisNS",id:"coercethisns",children:[]},{value:"CreateGenerator",id:"creategenerator",children:[]},{value:"StartGenerator",id:"startgenerator",children:[]},{value:"SaveAndYield",id:"saveandyield",children:[]},{value:"ResumeGenerator",id:"resumegenerator",children:[]},{value:"UnreachableInst",id:"unreachableinst",children:[]}]},{value:"Target Instructions",id:"target-instructions",children:[{value:"HBCGetGlobalObjectInst",id:"hbcgetglobalobjectinst",children:[]},{value:"HBCCreateFunction",id:"hbccreatefunction",children:[]},{value:"HBCCreateGenerator",id:"hbccreategenerator",children:[]},{value:"HBCAllocObjectFromBufferInst",id:"hbcallocobjectfrombufferinst",children:[]},{value:"HBCCallBuiltinInst",id:"hbccallbuiltininst",children:[]},{value:"HBCCallNInst",id:"hbccallninst",children:[]}]}],c={rightToc:i},o="wrapper";function s(e){var t=e.components,a=l(e,["components"]);return Object(n.b)(o,r({},c,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h2",null,Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"design-of-the-hermes-high-level-ir"})),Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#design-of-the-hermes-high-level-ir"}),"#"),"Design of the Hermes high-level IR"),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"introduction"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#introduction"}),"#"),"Introduction"),Object(n.b)("p",null,"This document is a reference manual for the Hermes High-level IR. The IR is a\nStatic Single Assignment (SSA) based representation that captures the JavaScript\nlanguage semantics. It features optional types (values may be annotated with\ntypes)."),Object(n.b)("p",null,"The IR representation is designed to be used as an in-memory form. The IR can be\ndumped to human readable assembly-like format."),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"well-formedness"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#well-formedness"}),"#"),"Well-Formedness"),Object(n.b)("p",null,"This section describes the rules that define a valid IR."),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"Instructions must be dominated by their operands.")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"Basic block must end with a terminator, which is a branch instruction or a\nreturn instruction.")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"There has to be exactly one terminator for each basic block.")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"AllocStack instructions must appear at the 'entry' basic block (the first basic\nblock in the function).")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"PHI Nodes must appear at the beginning of the basic block and must contain\nan entry for each predecessor."))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"frames"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#frames"}),"#"),"Frames:"),Object(n.b)("p",null,"Every JavaScript function is a closure that can capture variables from its\ndeclaration scope. The declaration scope may be the global scope or another\nfunction. A closure is a pair of function code, which contains the code of the\nfunction, and a context which saves the environment that the closure may access."),Object(n.b)("p",null,"Function variables that are captured by a closure are allocated in a scope on\nthe heap and the scope is passed as part of the context to the closure.\nClosures may access variables at all nest-levels, which means that they can\naccess multiple scopes. We implement this feature by nesting scopes and linking\nthem together. Each scope (the set of captured variables) also has a reference\nto the scope of the caller function. Closures can access variables at different\nnesting levels by loading the parent scope for each scope."),Object(n.b)("p",null,"At the IR Level we define a few instructions that can load and store frame\nvariables.  Functions own variables, that are storage units that represent\nvariables at the source level.  These variables can be optimized away or\npromoted to the stack, etc.  We define the AllocStack instruction for allocating\nvariable storage. The only instructions that can access the storage values\n(Variable and AllocStack) are the Load and Store instructions. It is not\npossible to save the address of the allocation itself. Depending on the\nimplementation of the virtual machine, the heap allocations may be packed into a\nsingle frame."),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"types"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#types"}),"#"),"Types:"),Object(n.b)("p",null,"The Hermes high-level IR is optionally typed. Values may be annotated with the\nexpected type of the value. The types are optional and untyped programs are\ncorrect. The types represent primitive JavaScript types, or refinement of these\ntypes. All values can be annotated with types: Functions, Instructions and\nParameters. Annotations of functions represent the type of the returned value.\nThe type annotations are not a suggestion or a hint. They must be correct and\nconsistent or else the program may fail at run time. Programs are expected to\nrun and have the same semantics when the type annotations are stripped."),Object(n.b)("p",null,"Some instructions in the IR expect operands of specific types, or produce\nspecific types.  For example, the CondBranch instruction expects the condition\noperand to be annotated as a boolean type. The ToBool instruction produces\nvalues that are annotated as boolean type."),Object(n.b)("p",null,"The optimizer may optimize the IR based on type annotations. For example, if the\noperand of the instruction ToBool is annotated with the boolean type then the\noptimizer is free to remove the instruction and replace all uses with the\noperand of the conversion instruction."),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"example"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#example"}),"#"),"Example:"),Object(n.b)("p",null,"This is a short example of a valid program in textual IR. The function contains\nfour basic blocks with a few instructions. The code below follow the\nrequirements of a well-formed function defined in the previous section."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{}),"  function forEach(cond : boolean, value : number)\n    %BB0:\n      %0 = BranchInst %BB1\n    %BB1:\n      %2 = CondBranchInst %cond, %BB2, %BB3\n    %BB2:\n      %3 = ReturnInst %cond\n    %BB3:\n      %4 = ReturnInst %value\n")),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"side-effects"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#side-effects"}),"#"),"Side Effects:"),Object(n.b)("p",null,"The instructions in the IR are annotated with side effect labels. The\nlabels describe the kind of effect the instruction has on memory, IO\nstate (for example, hardware IO such as drawing to a screen or sending\na network packet), and whether they can throw. The two kind of memory\nside effects are 'read' and 'write'.  ('write' actually indicates\n\"read and/or write\".)  These side effect specifications indicate that\nthe instruction does not have IO effects or throw.  The 'unknown' side\neffect is maximally conservative: it indicates that the instruction\nmay read, write, have IO effects, and/or throw.  These side effect\nannotations allow the optimizer to decide which optimizations are\nlegal. For example, it is not legal to sink instructions that can\nwrite to memory past each other. It is not legal to hoist instructions\nthat read to memory outside of a loop if there is another instruction\nthat writes to memory in that loop, because the writer instruction may\nclobber memory that the reader may read."),Object(n.b)("p",null,"Some instructions that allocate memory are marked as not having any side\neffects.  This is because the instructions only touch the newly allocated memory\nand do not influence the rest of the heap. Notice that we don't model the effect\nof instructions on the garbage collector or anything like that, just the content\nof the allocated memory."),Object(n.b)("h2",null,Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"register-allocation"})),Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#register-allocation"}),"#"),"Register allocation"),Object(n.b)("p",null,"In Hermes, register allocation is performed on the IR. An infinite number of\nvirtual registers are allocated while preserving the constraints of the IR and\nof the low-level target. Registers are allocated in an attempt to reduce the\nnumber of registers, values across PhiNodes are coalesced, AllocStack\ninstructions are assigned with a dedicated register and arguments to call\ninstructions are placed in consecutive registers."),Object(n.b)("p",null,"While in SSA form, the IR does not support all of the things that can be done\nwith registers. This is why the Register Allocator introduces MOV instructions\nthat represent a copy of one register to another. We lower some of the\nload/store instructions into MOVs, and spill registers with MOV instructions."),Object(n.b)("h2",null,Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"generator-overview"})),Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#generator-overview"}),"#"),"Generator Overview"),Object(n.b)("p",null,"When generating the IR for a generator function, we make two functions:\nan outer GeneratorFunction and an inner function.\nThe outer function calls CreateGenerator on the inner function,\nand returns the resultant generator."),Object(n.b)("p",null,"The inner function assumes that it can store and retrieve state from\nits own closure. As such, it contains instructions to start, save/yield,\nand resume generators."),Object(n.b)("p",null,"CreateGenerator:\nAn instruction to create a generator given a ",Object(n.b)("inlineCode",{parentName:"p"},"Function"),".\nFirst, it creates an inner GeneratorInnerFunction, then it wraps it in a Generator object.\nUsed by the GeneratorFunction to create the generator which is returned upon calling it."),Object(n.b)("p",null,"StartGenerator:\nAlways the first instruction executed when an inner function is called.\nRestores values for all local variables in the generator,\nand jumps to the resume point of the generator if it's suspended.\nIf the generator hasn't been started yet, simply continues execution."),Object(n.b)("p",null,"SaveAndYield:\nSaves necessary state to the closure and yields execution.\nIn practice, this will save state and use the return opcode to\nallow the caller to get the yield result.\nEmitting a SaveAndYield also emits its corresponding ResumeGenerator."),Object(n.b)("p",null,"ResumeGenerator:\nPlaced at the start of the block following the SaveAndYield to which it\ncorresponds. Resumes execution by loading context from the closure,\nand then using state stored in the closure, does one of 3 things:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Continues execution with the result of the instruction being the\nargument to ",Object(n.b)("inlineCode",{parentName:"li"},".next()"),"."),Object(n.b)("li",{parentName:"ul"},"Throws a value immediately"),Object(n.b)("li",{parentName:"ul"},"Sets an ",Object(n.b)("inlineCode",{parentName:"li"},"%isReturn")," flag to true, which later instructions may branch on to execute the ",Object(n.b)("inlineCode",{parentName:"li"},"finally"),"\nif necessary, and then return.")),Object(n.b)("h2",null,Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"instruction-semantics"})),Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#instruction-semantics"}),"#"),"Instruction semantics"),Object(n.b)("p",null,"This section describes the semantic of the instruction that are defined in the\nIR. Please make sure to update this section as new instructions are added to the\ncompiler."),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"branchinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#branchinst"}),"#"),"BranchInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"BranchInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Jumps to a different basic block.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%0 = BranchInst %BB1")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"A single operand which is the target basic block.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Terminates a basic block and 'jumps' to a different basic block.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Does not read or write from memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"returninst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#returninst"}),"#"),"ReturnInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"ReturnInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Leaves the function and returns a value.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%0 = ReturnInst %17")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"A single operand which is the returned value. Notice the functions that return without an explicit value return the 'undefined' value.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Terminates a basic block and transfer the control to the caller of the current function.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Does not read or write from memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"allocstackinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#allocstackinst"}),"#"),"AllocStackInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"AllocStackInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Allocates a variable on the stack.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%0 = AllocStackInst $name")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"$name is the textual representation of the variable at the sourcecode level.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"AllocStack allocates a variable on the stack. Depending on the implementation of the VM, the variables may be packed into a single frame. AllocStack values may be used by instructions in different functions that represent closures created by the current functions. AllocStack values are used to represent local and captured variables. The AllocStack itself needs to be used directly. It is not possible to save a reference to the reference. The lifetime of the AllocStack may not exceed the lifetime of the allocating function.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Does not read or write from memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"loadframeinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#loadframeinst"}),"#"),"LoadFrameInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"LoadFrameInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Loads a value from a variable.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%1 = LoadFrameInst %0")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The variable from which the instruction loads.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The the instruction reads from a variable. The address must be a valid variable.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Reads from memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"loadstackinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#loadstackinst"}),"#"),"LoadStackInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"LoadStackInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Loads a value from a stack allocated memory pointed by a reference.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%1 = LoadInst %0")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The address from which the instruction loads.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The the instruction reads from memory. The address must be a valid stack address.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Reads from memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"storeframeinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#storeframeinst"}),"#"),"StoreFrameInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"StoreFrameInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Stores a value to a frame variable.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%1 = StoreFrameInst %value, %variable")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%value is the value to be stored. %address is the reference to the variable where the value will be stored.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The the instruction saves a value to memory. The address must be a valid variable.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Writes to memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"storestackinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#storestackinst"}),"#"),"StoreStackInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"StoreStackInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Stores a value to a stack allocated memory.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%1 = StoreStackInst %value, %stack_allocated")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%value is the value to be stored. %address is the reference to stack allocation.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The the instruction saves a value to memory. The address must be a valid stack allocation.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Writes to memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"asnumberinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#asnumberinst"}),"#"),"AsNumberInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"AsNumberInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Casts a JavaScript value into a number value.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%1 = AsNumberInst %input")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The value to cast.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The instruction follows the JavaScript rules for converting types into numbers.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"May read or write to memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"asint32inst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#asint32inst"}),"#"),"AsInt32Inst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"AsInt32Inst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Casts a JavaScript value into a signed 32-bit integer value.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%1 = AsInt32Inst %input")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The value to cast.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The instruction follows the JavaScript rules for converting types into 32-bit signed integers.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"May read or write to memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"addemptystringinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#addemptystringinst"}),"#"),"AddEmptyStringInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"AddEmptyStringInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Convert a value to string as if evaluating ",Object(n.b)("inlineCode",{parentName:"td"},"value + ''"))),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%1 = AddEmptyStringInst %input")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The value to cast.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The instruction follows the JavaScript rules for adding an empty string to a value (ES5.1 11.6.1).")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"May read or write to memory or throw.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"condbranchinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#condbranchinst"}),"#"),"CondBranchInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"CondBranchInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Jumps to one of two blocks depending on a condition value.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%1 = CondBranchInst %cond, %BB1, %BB2")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%cond is the condition variable, %BB1 is the 'True' block, %BB2 is the 'False' block.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The instruction observes the value of a typed value and jumps to one of two basic blocks. If the condition is evaluated as 'True' the program jumps to the 'True' block. Otherwise the program jumps to the 'False' block.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Does not read or write from memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"comparebranchinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#comparebranchinst"}),"#"),"CompareBranchInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"CompareBranchInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Performs  a binary comparison of the two operands and a conditional branch depending on the result.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%0 = CompareBranch %x, %y, %BB1, %BB2")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%x and %y are the operands of the binary operation, %BB1 is the 'True' block, %BB2 is the 'False' block.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The instruction follows the rules of JavaScript for each one of the binary operators defined in the instruction. If the condition is evaluated as 'True' the program jumps to the 'True' block. Otherwise the program jumps to the 'False' block.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"May read and write memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"createfunction"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#createfunction"}),"#"),"CreateFunction"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"CreateFunction"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Constructs a new function into the current scope from its code representation.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%0 = CreateFunction %function,")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%function is the function that represents the code of the generated closure.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The instruction creates a new closure that may access the lexical scope of the calling function")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Does not read or write to memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"binaryoperatorinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#binaryoperatorinst"}),"#"),"BinaryOperatorInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"BinaryOperatorInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Performs the binary operation on the two operands.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%0 = BinaryOperatorInst %x, %y")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%x and %y are the operands of the binary operation.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The instruction follows the rules of JavaScript for each one of the binary operators defined in the instruction.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"May read and write memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"directevalinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#directevalinst"}),"#"),"DirectEvalInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"DirectEvalInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Implement a syntactical call to ",Object(n.b)("inlineCode",{parentName:"td"},"eval(arg)")," where ",Object(n.b)("inlineCode",{parentName:"td"},"eval")," is global property.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"%0 = DirectEvalInst %value1"))),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%value1 is the value which will be evaluated.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Implement the semantics of ES6 ",Object(n.b)("inlineCode",{parentName:"td"},"PerformEval(%value1, evalRealm, strictCaller=true, direct=true)"),' (ES6 18.2.1.1). Note that we only support "strictCaller=true".')),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Unknown")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"callinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#callinst"}),"#"),"CallInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"CallInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Calls another function with some arguments.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%0 = CallInst %callee, %this,  %arg0, %arg1, %arg2, ...")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%callee is the function to execute. %this is a reference to the 'this' value. Arguments %arg0 ... %argN are the arguments passed to the function.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The instruction passes the control to the callee, that must be of closure type. The arguments are mapped to the parameters. Unmapped parameters are initialized to 'undefined'.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"May read and write memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"constructinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#constructinst"}),"#"),"ConstructInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"ConstructInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Construct a new object with a constructor")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%0 = ConstructInst %constructor, #undefined, %arg0, %arg1, %arg2, ...")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%constructor is the constructor function to execute. #undefined is not used. %arg0 ... %argN are the arguments passed to the constructor function.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The instruction performs the steps defined in ES5.1 sec-11.2.2 and sec-13.2.2. It allocates the object and calls the constructor function with the new object and the supplied arguments.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"May read and write memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"loadpropertyinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#loadpropertyinst"}),"#"),"LoadPropertyInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"LoadPropertyInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Loads the value of a field from a JavaScript object.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%0 = LoadPropertyInst %object, %property")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%object is the object to load from. %property is the name of the field.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The instruction follows the rules of JavaScript property access in ES5.1 sec 11.2.1. The operation GetValue (ES5.1. sec 8.7.1) is then applied to the returned Reference.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"May read and write memory or throw.")))),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"TryLoadGlobalPropertyInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Loads the value of an existing field from the global object or throw if it doesn't exist.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%0 = TryLoadGlobalPropertyInst %object, %property")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%object is the global object. %property is the name of the field, which must be a string literal.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Similar to LoadPropertyInst, but throw if the field doesn't exist.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"May read and write memory or throw.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"deletepropertyinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#deletepropertyinst"}),"#"),"DeletePropertyInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"DeletePropertyInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Deletes the value of a field from a JavaScript object.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%0 = DeletePropertyInst %object, %property")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%object is the object to modify. %property is the name of the field.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The instruction follows the rules of JavaScript property access.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"May read and write memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"storepropertyinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#storepropertyinst"}),"#"),"StorePropertyInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"StorePropertyInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Stores a value to field in a JavaScript object.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%4 = StorePropertyInst %value, %object, %property")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%value is the value to be stored. %object is the object where the field %property will be created or modified.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The instruction follows the rules of JavaScript property access in ES5.1 sec 11.2.1. The operation PutValue (ES5.1. sec 8.7.2) is then applied to the returned Reference.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"May read and write memory or throw.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"trystoreglobalpropertyinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#trystoreglobalpropertyinst"}),"#"),"TryStoreGlobalPropertyInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"TryStoreGlobalPropertyInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Attempt to store a value into an existing field of the global object and throw if it doesn't exist.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%4 = TryStoreGlobalPropertyInst %value, %object, %property")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%value is the value to be stored. %object is the global object, where the field %property will be stored. %property must be a string literal.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Similar to StorePropertyInst, but throw if the field doesn't exist.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"May read and write memory or throw.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"storeownpropertyinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#storeownpropertyinst"}),"#"),"StoreOwnPropertyInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"StoreOwnPropertyInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Stores a value to an ",Object(n.b)("em",{parentName:"td"},"own property")," of JavaScript object.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%4 = StoreOwnPropertyInst %value, %object, %property, %enumerable : boolean")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%value is the value to be stored. %object is the object where the field with name %property will be created or modified. %enumerable determines whether a new property will be created as enumerable or not.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The instruction follows the rules of JavaScript ",Object(n.b)("em",{parentName:"td"},"own")," property access. The property is created or updated in the instance of the object, regardless of whether the same property already exists earlier in the prototype chain.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"May read and write memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"storenewownpropertyinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#storenewownpropertyinst"}),"#"),"StoreNewOwnPropertyInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"StoreNewOwnPropertyInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Create a new ",Object(n.b)("em",{parentName:"td"},"own property")," in what is known to be a JavaScript object.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"%4 = StoreNewOwnPropertyInst %value, %object, %property, %enumerable : boolean"))),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),Object(n.b)("em",{parentName:"td"},"%value")," is the value to be stored. ",Object(n.b)("em",{parentName:"td"},"%object"),", which must be an object, is where the field with name ",Object(n.b)("em",{parentName:"td"},"%property")," will be created. ",Object(n.b)("em",{parentName:"td"},"%property")," must be a string literal, otherwise it is impossible to guarantee that it is new. ",Object(n.b)("em",{parentName:"td"},"%enumerable")," determines whether the new property will be created as enumerable or not.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The instruction follows the rules of JavaScript ",Object(n.b)("em",{parentName:"td"},"own")," property access. The property is created in the instance of the object, regardless of whether the same property already exists earlier in the prototype chain.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"May read and write memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"storegettersetterinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#storegettersetterinst"}),"#"),"StoreGetterSetterInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"StoreGetterSetterInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Associates a pair of getter and setter with an ",Object(n.b)("em",{parentName:"td"},"own")," field in a JavaScript object, replacing the previous value.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%4 = StoreGetterSetterInst %getter, %setter, %object, %property, %enumerable")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%getter is a getter accessor, or undefined. %setter is a setter accessor, or undefined. %object is the object where the field %property will be created or modified. %enumerable determines whether a new property will be created as enumerable or not.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The instruction follows the rules of JavaScript property access. The property is created or updated in the instance of the object, regardless of whether the same property already exists earlier in the prototype chain. It replaces both accessors even if one or both of the parameters are undefined.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"May read and write memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"allocobjectinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#allocobjectinst"}),"#"),"AllocObjectInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"AllocObjectInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Allocates a new JavaScript object on the heap.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"%0 = AllocObjectInst %sizeHint : LiteralNumber, %parent : EmptySentinel or null or Value"))),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),Object(n.b)("em",{parentName:"td"},"%sizeHint% indicates that the object will need at least that many property slots. "),"%parent",Object(n.b)("em",{parentName:"td"}," is the optional parent to create the object with: "),"EmptySentinel",Object(n.b)("em",{parentName:"td"}," means use "),"Object.prototype",Object(n.b)("em",{parentName:"td"},", "),"null* means no parent, or otherwise use the specified value.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The instruction creates a new JavaScript object on the heap. If the parent is invalid (not EmptySenyinel, null or object), it is silently ignored.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Does not read or write to memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"allocarrayinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#allocarrayinst"}),"#"),"AllocArrayInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"AllocArrayInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Allocates a new JavaScript array on the heap.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%0 = AllocArrayInst %sizeHint, %value0, %value1, ...")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"sizeHint tells the size of the array that the VM should allocate. It must be equal or larger than the initial list of elements in this instruction. The rest of the values are all literal values as the initial elements of the array. Non-literal values or values after elision will be inserted into the array separately.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The instruction creates a new JavaScript array on the heap with a hinted size and initial list of elements.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Does not read or write to memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"createargumentsinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#createargumentsinst"}),"#"),"CreateArgumentsInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"CreateArgumentsInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Allocates the JavaScript ",Object(n.b)("inlineCode",{parentName:"td"},"arguments")," array-like object on the heap.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%0 = CreateArgumentsInst")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"None.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The instruction creates the ",Object(n.b)("inlineCode",{parentName:"td"},"arguments"),' object, populates it with copies of the values of the arguments (according to "strict mode" semantics) and sets ',Object(n.b)("inlineCode",{parentName:"td"},"arguments.length")," to the number of arguments (",Object(n.b)("inlineCode",{parentName:"td"},"this")," isn't copied or counted). There should be only one CreateArgumentsInst in a function.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Does not read or write to memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"createregexpinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#createregexpinst"}),"#"),"CreateRegExpInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"CreateRegExpInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Construct a RegExp object from a regexp literal.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),'%0 = CreateRegExpInst "pattern", "flags"')),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"pattern: LiteralString")," and ",Object(n.b)("inlineCode",{parentName:"td"},"flags: LiteralString"))),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"It is equivalent to calling ",Object(n.b)("inlineCode",{parentName:"td"},"RegExp(pattern, flags)"),", except that it calls the built-in constructor, even if ",Object(n.b)("inlineCode",{parentName:"td"},"RegExp")," has been overridden.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Does not read or write to memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"switchinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#switchinst"}),"#"),"SwitchInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"SwitchInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The ‘switch‘ instruction is used to transfer control to one of different places.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%0 = SwitchInst %input, %default, ","[%val0, %block0]",", ","[%val1, %block1]"," ..")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The instruction accepts an input, a default block, and one or more pairs of value-destination values. The value must be a primitive JS type, and the destination must be a basic block within the current function.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The semantic of the instruction is identical to a squence of 'if' statements that compare the value of the input to each of the case statements. Repeating the same value is not allowed.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"May read and write memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"getpnamesinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#getpnamesinst"}),"#"),"GetPNamesInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"GetPNamesInt"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Generates the property enumerator, which is a collection of registers that hold the state of the enumerator (iterator, object base, index, size, etc).")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%0 = GetPNamesInt  %propertyAddr, %baseAddr, %indexAddr, %sizeAddr, %iteratorAddr, %onEmpty, %onLast")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The first 5 parameters are addresses (stack allocated addresses) that represent the state of the property enumerator. The last two argument are jump destination for the two cases: empty object and object with some properties.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"This instruction is a terminator instruction and prepares the enumerator for the GetNextPNameInst instruction to consume.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"May read and write memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"getnextpnameinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#getnextpnameinst"}),"#"),"GetNextPNameInst"),Object(n.b)("p",null,"GetNextPNameInst | _\nDescription | Loads the next property from the object property enumerator.\nExample |  %0 = GetNextPNameInst %propertyAddr, %baseAddr, %indexAddr, %sizeAddr, %iteratorAddr, %onLast, %onSome\nArguments | The first argument is the destination where the name of the property is written into. The next 4 arguments are the state of the property enumerator. The last two arguments are the destination blocks for: no next property, or some property available.\nSemantics | This instruction is a terminator instruction that uses the state that was prepared by the GetPNamesInst instruction.\nEffects | May read and write memory."),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"catchinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#catchinst"}),"#"),"CatchInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"CatchInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"This instruction catches an exception, and returns that exception.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%0 = CatchInst")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"This instruction does not have arguments.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Sementics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"This instruction will be generated for each catch block and for each finally block. The current exception will be returned. CatchInst can only show up at the beginning of a basic block. The coverage and depth inforamtion for the CatchInst will be constructed dynamically later during bytecode generation.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"May read and write memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"throwinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#throwinst"}),"#"),"ThrowInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"ThrowInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"This instruction will throw an exception.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%0 = ThrowInst %e")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"This instruction takes one parameter, which is the register that contains the exception value")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"This instruction is a terminator instruction that will transition the control to the CatchInst that covers this instruction with closest scope.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"May read and write memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"checkhasinstanceinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#checkhasinstanceinst"}),"#"),"CheckHasInstanceInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"CheckHasInstanceInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Check whether an object has a particular instance.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%0 = CheckHasInstanceInst %check_result, %left, %right, %onTrue, %onFalse")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"This instruction takes 5 parameters: %check_result will be a write-only stack register and holds the check result, %left and %right are the operands of instanceof, and %onTrue and %onFalse are the jump targets in case of check returns true/false.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"This instruction is generated as part of instanceof operator. It checks whether %right could possibly have %left as an instance, and returns the check result. If the checked object is invalid to have the target instance, it will throw an exception. It the check returns false, it jumps to the %jump_label.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"May read or write memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"trystartinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#trystartinst"}),"#"),"TryStartInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"TryStartInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Mark the beginning of the try blocks.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%0 = TryStartInst %catchTargetBlock, %tryBodyBlock")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"This instruction takes 2 arguments: %tryBodyBlock is the block where the body of Try starts, %catchTargetBlock is the basic block that contains the CatchInst which covers this try. Both %tryBodyBlock and %catchTargetBlock are successors of this instruction.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"This is a nop, used only for tracking the beginning of try blocks.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Does not read or write memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"tryendinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#tryendinst"}),"#"),"TryEndInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"TryEndInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Mark the end of the try blocks.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%0 = TryEndInst")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"This instruction does not have arguments.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"This is a nop, used only for tracking the end of try blocks.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Technically this instruction itself does not touch memory, however we mark it as may write to prevent optimizations going pass this instruction.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"phiinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#phiinst"}),"#"),"PhiInst"),Object(n.b)("p",null,"PhiInst | _\nDescription | This is a Phi node instruction.\nExample |  %0 = PhiInst %value0, %block0, ","[%value1, %block1]","\nArguments | A list of pairs of value and incoming basic block.\nSemantics | The PhiNode needs to have a single entry for each incoming basic block of the block the PHI is located in. The incoming value must dominate the last instruction in the incoming block.\nEffects | Does not read or write memory."),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"movinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#movinst"}),"#"),"MovInst"),Object(n.b)("p",null,"MovInst | _\nDescription | The MOV inst represents a low-level operation of moving one register to another.\nExample |  %0 = MovInst %value0\nArguments | Any value.\nSemantics | The Mov instruction is only valid after Register Allocation in bytecode as we move away from SSA form.\nEffects | Does not read or write memory."),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"implicitmovinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#implicitmovinst"}),"#"),"ImplicitMovInst"),Object(n.b)("p",null,"ImplicitMovInst | _\nDescription | The ImplicitMov inst represents moving one register to another, except the mov will be performed implicitly by an immediately-subsequent instruction. This is used to express to the optimizer instructions which modify registers other than their destination.\nExample |  %0 = ImplicitMovInst %value0\nArguments | Any value.\nSemantics | The ImplicitMov instruction is only valid after Register Allocation in bytecode as we move away from SSA form.\nEffects | Does not read or write memory."),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"debuggerinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#debuggerinst"}),"#"),"DebuggerInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"DebuggerInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"This instruction corresponds to the JavaScript ",Object(n.b)("inlineCode",{parentName:"td"},"debugger")," statement.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%0 = DebuggerInst")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"It takes no arguments and returns no values.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Its behavior is implementation-dependent.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Does not read or write to memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"getnewtargetinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#getnewtargetinst"}),"#"),"GetNewTargetInst"),Object(n.b)("p",null,"GetNewTargetInst | _\nDescription | Obtains the value of ",Object(n.b)("inlineCode",{parentName:"p"},"new.target")," in the current function or constructor.\nExample |  %0 = GetNewTargetInst\nArguments | None\nSemantics | It must only be called from a ES6 class constructor or ES5 function. If the callee was invoked from ",Object(n.b)("inlineCode",{parentName:"p"},"new"),", it returns the function object of the direct constructor, otherwise ",Object(n.b)("inlineCode",{parentName:"p"},"undefined"),".\nEffects | Does not read or write memory"),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"throwifundefinedinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#throwifundefinedinst"}),"#"),"ThrowIfUndefinedInst"),Object(n.b)("p",null,"ThrowIfUndefinedInst | ",Object(n.b)("em",{parentName:"p"},"\nDescription | Check whether the value is undefined, and if it is, throw ReferenceError.\nExample |  %")," = ThrowIfUndefinedInst %value\nArguments | The value to check.\nSemantics | It is used to implement ES6 TDZ functionality. Variables declared with ",Object(n.b)("inlineCode",{parentName:"p"},"let")," are ",Object(n.b)("em",{parentName:"p"},"poisoned")," with undefined until they are initialized.\nEffects | Potentially throws an exception. Has no other side effects."),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"coercethisns"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#coercethisns"}),"#"),"CoerceThisNS"),Object(n.b)("p",null,'CoerceThisNS | _\nDescription | Coerces its argument using the rules of "this" coercion to object in non-strict mode.\nExample |  %0 = CoerceThisNS %value0\nArguments | Any value.\nSemantics |\nEffects | Does not read or write memory (it potentially creates a new object)'),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"creategenerator"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#creategenerator"}),"#"),"CreateGenerator"),Object(n.b)("p",null,"CreateGenerator | _\nDescription | Constructs a new GeneratorInnerFunction from its code representation, and wraps it in a Generator object.\nExample | %0 = CreateGenerator %function,\nArguments | %function is the function that represents the code of the generator's inner function.\nSemantics | Creates a new GeneratorInnerFunction closure that may access the environment and wraps it in a generator\nEffects | Does not read or write to memory (creates a new object)."),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"startgenerator"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#startgenerator"}),"#"),"StartGenerator"),Object(n.b)("p",null,'StartGenerator | _\nDescription | Jump to the proper first instruction to execute in a GeneratorInnerFunction\nExample |  %0 = StartGenerator\nArguments | None\nSemantics | Jumps to a BasicBlock which begins with a ResumeGenerator and sets the internal generator state to "executing", but does not handle next(), return(), or throw() as requested by the user.\nEffects | Reads and writes memory. Restores the stack based on saved state, and jumps to another BasicBlock'),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"saveandyield"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#saveandyield"}),"#"),"SaveAndYield"),Object(n.b)("p",null,"SaveAndYield | _\nDescription | Saves information needed to resume generator execution and yield.\nExample |  %0 = SaveAndYield %value, %next\nArguments | %value is the value to yield, %next is the next BasicBlock to execute upon resuming, which must begin with a ResumeGeneratorInst (generated alongside SaveAndYield).\nSemantics | Saves the frame variables and the next IP to the closure, and yield execution.\nEffects | Reads and writes to memory, may throw or execute."),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"resumegenerator"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#resumegenerator"}),"#"),"ResumeGenerator"),Object(n.b)("p",null,"ResumeGenerator | _\nDescription | Perform the user-requested action on resuming a generator.\nExample |  %0 = ResumeGenerator %isReturn\nArguments | %isReturn is an output argument set to true if the user requested a return, false otherwise.\nSemantics | If the user requested next(), continue on. If the user requested throw(), throw. If the user requested return(), set %isReturn to true and continue. Subsequent instructions will check %isReturn and execute any ",Object(n.b)("inlineCode",{parentName:"p"},"finally")," handlers, for example, before returning.\nEffects | May read and write memory. (may throw)"),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"unreachableinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#unreachableinst"}),"#"),"UnreachableInst"),Object(n.b)("p",null,"UnreachableInst | _\nDescription | Crashes the VM (ifndef NDEBUG).\nExample |  %0 = UnreachableInst\nArguments | None.\nSemantics | Can be added to stubs and similar to verify that they are never executed.\nEffects | Marked as reading/writing memory to avoid reordering."),Object(n.b)("h2",null,Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"target-instructions"})),Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#target-instructions"}),"#"),"Target Instructions"),Object(n.b)("p",null,"Some high-level IR instructions are lowered into a sequence of low-level machine\ninstructions. In order to perform register allocation on these instructions we\nneed to perform lowering, which is a form of instruction selection. The semantic\nof these instructions are identical to the semantic of the relevant target\ninstructions."),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"hbcgetglobalobjectinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#hbcgetglobalobjectinst"}),"#"),"HBCGetGlobalObjectInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"HBCGetGlobalObjectInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),'Obtain the "global" object')),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%0 = HBCGetGlobalObjectInst")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"None.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),'The instruction returns a reference to the "global" object.')),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Does not read or write to memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"hbccreatefunction"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#hbccreatefunction"}),"#"),"HBCCreateFunction"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"HBCCreateFunction"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Create a new closure capturing the specified environment and using the specified body")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%0 = HBCCreateFunction %environment, %body,")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%environment is the closure's environment. %body is the closure's body.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The instruction creates a new closure that may access the specified environment.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Does not read or write to memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"hbccreategenerator"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#hbccreategenerator"}),"#"),"HBCCreateGenerator"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"CreateGenerator"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Constructs a new Generator into the current scope from its code representation.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%0 = CreateGenerator %environment, %body,")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%environment is the closure's environment, %body is the closure's body.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The instruction creates a new GeneratorInnerFunction access the environment and wraps it in a Generator.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Does not read or write to memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"hbcallocobjectfrombufferinst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#hbcallocobjectfrombufferinst"}),"#"),"HBCAllocObjectFromBufferInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"HBCAllocObjectFromBufferInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Allocates a new JavaScript object on the heap, and initializes it with values from the object buffer.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%0 = HBCAllocObjectFromBufferInst %value0, %value1, ...")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The values are all literal values, with alternating keys and values. Non-literal values will be inserted into the array separately.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The instruction creates a new JavaScript object on the heap with an initial list of properties.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Does not read or write to memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"hbccallbuiltininst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#hbccallbuiltininst"}),"#"),"HBCCallBuiltinInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"HBCCallBuiltinInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),'Calls a builtin function passing "undefined" for this')),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%0 = HBCCallBuiltinInst %builtinNumber, %undefined, %arg0, %arg1, %arg2, ...")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%builtinNumber is the builtin to execute. Arguments %arg0 ... %argN are the arguments passed to the function.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The instruction passes the control to the builtin in a VM-specific way. The arguments are mapped to the parameters. Unmapped parameters are initialized to 'undefined'.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Effects"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"May read and write memory.")))),Object(n.b)("h3",null,Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"hbccallninst"})),Object(n.b)("a",r({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#hbccallninst"}),"#"),"HBCCallNInst"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"HBCCallNInst"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"_"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Description"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Calls a function with a fixed number of arguments (from 1 to 4, inclusive).")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Example"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%0 = HBCCallNInst %callee, %this, %arg0, %arg1, %arg2")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Arguments"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"%callee is the function to execute. %this is a reference to the 'this' value. Arguments %arg0 ... %argN are the arguments passed to the function.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The instruction copies its arguments (starting from this) into the parameter-passing registers at the end of the frame, and passes the control to the callee, which must be of closure type.")))),Object(n.b)("p",null,"The arguments are mapped to the parameters. Unmapped parameters are initialized to 'undefined'.\nEffects | May read and write memory."))}s.isMDXComponent=!0}}]);