(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{55:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",function(){return l}),a.d(n,"rightToc",function(){return o}),a.d(n,"default",function(){return b});a(0);var t=a(80);function i(){return(i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e}).apply(this,arguments)}function r(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l={id:"vm",title:"VM"},o=[{value:"Hermes VM",id:"hermes-vm",children:[]},{value:"Value Representation",id:"value-representation",children:[{value:"Strings",id:"strings",children:[]}]},{value:"Runtime",id:"runtime",children:[{value:"Runtime Module",id:"runtime-module",children:[]},{value:"Runtime Identifiers",id:"runtime-identifiers",children:[]},{value:"Garbage Collection",id:"garbage-collection",children:[]}]},{value:"Object Model",id:"object-model",children:[{value:"Objects",id:"objects",children:[]},{value:"Arrays",id:"arrays",children:[]},{value:"Functions",id:"functions",children:[]},{value:"Boxed Primitives",id:"boxed-primitives",children:[]}]},{value:"REPL",id:"repl",children:[]}],c={rightToc:o},s="wrapper";function b(e){var n=e.components,a=r(e,["components"]);return Object(t.b)(s,i({},c,a,{components:n,mdxType:"MDXLayout"}),Object(t.b)("h2",null,Object(t.b)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"hermes-vm"})),Object(t.b)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#hermes-vm"}),"#"),"Hermes VM"),Object(t.b)("p",null,"In which the general design of the Hermes VM is explained."),Object(t.b)("h2",null,Object(t.b)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"value-representation"})),Object(t.b)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#value-representation"}),"#"),"Value Representation"),Object(t.b)("p",null,"The VM uses a class called ",Object(t.b)("inlineCode",{parentName:"p"},"HermesValue")," to encapsulate JS values efficiently,\npreserving their type while still allowing them to fit in a register.\nNaN-tagging is used to store different types of values;\nwe store values in the lower bits of a ",Object(t.b)("inlineCode",{parentName:"p"},"uint64_t"),".\nThus, when the ",Object(t.b)("inlineCode",{parentName:"p"},"uint64_t")," is interpreted as a ",Object(t.b)("inlineCode",{parentName:"p"},"double"),",\ntagged ",Object(t.b)("inlineCode",{parentName:"p"},"NaN")," values can hold non-",Object(t.b)("inlineCode",{parentName:"p"},"double")," types."),Object(t.b)("h3",null,Object(t.b)("a",i({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"strings"})),Object(t.b)("a",i({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#strings"}),"#"),"Strings"),Object(t.b)("p",null,Object(t.b)("inlineCode",{parentName:"p"},"StringPrimitive")," is used to store immutable UTF16 encoded strings,\nand ",Object(t.b)("inlineCode",{parentName:"p"},"StringPrimitive *")," can be stored in ",Object(t.b)("inlineCode",{parentName:"p"},"HermesValue")," to make JS String values."),Object(t.b)("h2",null,Object(t.b)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"runtime"})),Object(t.b)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#runtime"}),"#"),"Runtime"),Object(t.b)("p",null,"The ",Object(t.b)("inlineCode",{parentName:"p"},"Runtime")," class is the primary driver of the VM.\nIt contains the current environment and heap, as well as the code to execute.\n",Object(t.b)("inlineCode",{parentName:"p"},"Runtime")," is used to execute ",Object(t.b)("inlineCode",{parentName:"p"},"RuntimeModule"),"s,\nwhich are constructed from ",Object(t.b)("inlineCode",{parentName:"p"},"BytecodeModule"),"s using ",Object(t.b)("inlineCode",{parentName:"p"},"Runtime::runModule()"),"."),Object(t.b)("h3",null,Object(t.b)("a",i({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"runtime-module"})),Object(t.b)("a",i({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#runtime-module"}),"#"),"Runtime Module"),Object(t.b)("p",null,"TODO: Explain the ownership model of the RuntimeModule here."),Object(t.b)("h3",null,Object(t.b)("a",i({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"runtime-identifiers"})),Object(t.b)("a",i({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#runtime-identifiers"}),"#"),"Runtime Identifiers"),Object(t.b)("p",null,"The ",Object(t.b)("inlineCode",{parentName:"p"},"Runtime")," contains an ",Object(t.b)("inlineCode",{parentName:"p"},"IdentifierTable"),",\nwhich is used for getting unique IDs for strings.\nThe table is used to go from ",Object(t.b)("inlineCode",{parentName:"p"},"StringPrimitive")," to ",Object(t.b)("inlineCode",{parentName:"p"},"IdentifierID"),' and back.\nIt\'s prepopulated with some "predefined strings",\nthe set of strings that are required by built in functions,\nwhich can be seen in ',Object(t.b)("inlineCode",{parentName:"p"},"PredefinedStrings.def"),"."),Object(t.b)("h3",null,Object(t.b)("a",i({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"garbage-collection"})),Object(t.b)("a",i({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#garbage-collection"}),"#"),"Garbage Collection"),Object(t.b)("p",null,"Currently, the VM uses ",Object(t.b)("inlineCode",{parentName:"p"},"SemiSpaceGC")," for its garbage collection needs.\nThe garbage collector allocates two sections of memory;\non collection, it moves all live cells from one section to another,\nwith the exception of values stored as ",Object(t.b)("inlineCode",{parentName:"p"},"PinnedHermesValue"),"\n(mainly used for global objects stored in the ",Object(t.b)("inlineCode",{parentName:"p"},"Runtime")," itself).\nThe garbage collector is precise\n(it knows what ",Object(t.b)("inlineCode",{parentName:"p"},"HermesValue"),"s are valid pointers to objects in the JS heap)."),Object(t.b)("p",null,"TODO: Elaborate on the garbage collector requirements and future plans."),Object(t.b)("p",null,"The garbage collector moves objects to different place on the heap,\ninvalidating ",Object(t.b)("inlineCode",{parentName:"p"},"HermesValue"),'s, so there are a couple "scoped" value classes.\n',Object(t.b)("inlineCode",{parentName:"p"},"Handle<>")," and ",Object(t.b)("inlineCode",{parentName:"p"},"Handle<T>")," are garbage collector-aware handles;\nthey are moved if a collection occurs in between two successive accesses.\nSo, to ensure correctness in the VM,\nuse the handles instead of passing raw ",Object(t.b)("inlineCode",{parentName:"p"},"HermesValue")," between functions."),Object(t.b)("p",null,"A ",Object(t.b)("inlineCode",{parentName:"p"},"GCScope")," is used to keep track of all the current ",Object(t.b)("inlineCode",{parentName:"p"},"HermesValue")," handles.\nAny ",Object(t.b)("inlineCode",{parentName:"p"},"GCScope")," must be constructed on the stack,\nwhence it tracks any scoped handles that are used until it falls out of scope.\nThe ",Object(t.b)("inlineCode",{parentName:"p"},"GCScope")," allocates space in chunks,\nand when it is destroyed (falls out of scope) it frees any chunks it allocated.\nThe ",Object(t.b)("inlineCode",{parentName:"p"},"GCScope")," is used to internally generate ",Object(t.b)("inlineCode",{parentName:"p"},"PinnedHermesValue"),"s,\nwhich are then stored in ",Object(t.b)("inlineCode",{parentName:"p"},"Handle<>")," and ",Object(t.b)("inlineCode",{parentName:"p"},"Handle<T>"),"."),Object(t.b)("h4",null,Object(t.b)("a",i({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"rules-for-using-handles"})),Object(t.b)("a",i({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#rules-for-using-handles"}),"#"),"Rules for using handles"),Object(t.b)("ol",null,Object(t.b)("li",{parentName:"ol"},"A function that can perform an allocation (even if it doesn't do it every\ntime) or calls a function that does, must accept and return only handles\n(for GC-managed objects)."),Object(t.b)("li",{parentName:"ol"},"A function that accepts or returns handles is allowed (and can be assumed\nto) allocate more handles, but the upper bound of allocated handles must be\nstatic."),Object(t.b)("li",{parentName:"ol"},"The number of handles in a given GCScope should have a static upper limit.")),Object(t.b)("p",null,"The motivation for these rules should be self-explanatory.  The practical\nimplication of rule 2 and 3 is that recursion and loops that allocate handles\nin every iteration must be treated specially.  In case of recursion a new\nGCScope should be defined in each recurrence (is that the correct term?).  In\ncase of a loop, there are a couple of possibilities:"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"in loops that are expected to be low iteration and not performance critical,\na new GCScope can be defined in the body of the loop."),Object(t.b)("li",{parentName:"ul"},"otherwise a GCScope::Marker should be used to flush the allocated handles of\nthe previous iteration."),Object(t.b)("li",{parentName:"ul"},"mutable handles can be used to avoid allocating a new handle on every\niteration.")),Object(t.b)("h2",null,Object(t.b)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"object-model"})),Object(t.b)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#object-model"}),"#"),"Object Model"),Object(t.b)("p",null,'Currently the object model is a VTable-based scheme,\nin which all possible JS values inherit from a base garbage collector VTable.\nThese are called "cells", and all the cells are defined in ',Object(t.b)("inlineCode",{parentName:"p"},"CellKinds.def"),".\nObjects have a special ",Object(t.b)("inlineCode",{parentName:"p"},"ObjectVTable"),"."),Object(t.b)("h3",null,Object(t.b)("a",i({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"objects"})),Object(t.b)("a",i({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#objects"}),"#"),"Objects"),Object(t.b)("p",null,"Each JS object is represented by ",Object(t.b)("inlineCode",{parentName:"p"},"Object")," (or a class derived from ",Object(t.b)("inlineCode",{parentName:"p"},'Object).\nJS objects have a set of name/value pairs, and some optional "indexed storage".\nRead more about how'),"Object",Object(t.b)("inlineCode",{parentName:"p"},"works in"),"ObjectModel.h`.\nThe Runtime contains a global object which is used to store in global scope."),Object(t.b)("h3",null,Object(t.b)("a",i({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"arrays"})),Object(t.b)("a",i({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#arrays"}),"#"),"Arrays"),Object(t.b)("p",null,"Arrays, the ",Object(t.b)("inlineCode",{parentName:"p"},"arguments")," object, etc. inherit from Object directly,\nbut simply provide their own implementations of ",Object(t.b)("inlineCode",{parentName:"p"},"*OwnIndexed")," using the VTable."),Object(t.b)("h3",null,Object(t.b)("a",i({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"functions"})),Object(t.b)("a",i({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#functions"}),"#"),"Functions"),Object(t.b)("p",null,"Functions and native functions inherit from ",Object(t.b)("inlineCode",{parentName:"p"},"Callable"),".\nThis allows them to call ",Object(t.b)("inlineCode",{parentName:"p"},"executeCall*")," to run functions using the internal API."),Object(t.b)("h3",null,Object(t.b)("a",i({parentName:"h3"},{"aria-hidden":!0,className:"anchor",id:"boxed-primitives"})),Object(t.b)("a",i({parentName:"h3"},{"aria-hidden":!0,className:"hash-link",href:"#boxed-primitives"}),"#"),"Boxed Primitives"),Object(t.b)("p",null,"The ",Object(t.b)("inlineCode",{parentName:"p"},"PrimitiveBox")," class is used to contain Booleans, Strings, and Numbers,\nwhen they are constructed using their respective JS constructors.\n",Object(t.b)("inlineCode",{parentName:"p"},"JSString")," is a ",Object(t.b)("inlineCode",{parentName:"p"},"PrimitiveBox")," that is used for ",Object(t.b)("inlineCode",{parentName:"p"},"String")," objects, etc."),Object(t.b)("h2",null,Object(t.b)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"repl"})),Object(t.b)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#repl"}),"#"),"REPL"),Object(t.b)("p",null,"The HermesVM provides a REPL in ",Object(t.b)("inlineCode",{parentName:"p"},"bin/hermes-repl"),",\nwhich calls through to the ",Object(t.b)("inlineCode",{parentName:"p"},"eval()")," global function in the ",Object(t.b)("inlineCode",{parentName:"p"},"Runtime"),"."))}b.isMDXComponent=!0}}]);